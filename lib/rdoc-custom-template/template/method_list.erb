<%
values = values[:values] if values[:values]
entry = values[:entry]
sections = values[:sections].keys if values.has_key?(:sections)
methods = entry.method_list + entry.attributes

unless methods.empty? %>
  <div class='card' id='method-list'>
    <div class='card-header'>
      <h2>Methods</h2>
    </div>
    <div class='card-body'>
    <% %w[attr attr_accessor attr_reader attr_writer class instance].each do |type|
         (RDoc::VISIBILITIES rescue RDoc::Context::VISIBILITIES).each do |vis|
            list = methods.reject { |x| x.respond_to?(:is_alias_for) && x.is_alias_for }.select { |x| x.visibility == vis && x.type == type.to_s }.sort
            next if list.empty?
            type_result = ""
            if type =~ /^attr_/
              type_result += type.sub(/^attr_/, '').capitalize
            else
              type_result += type.capitalize
            end
            type_result = "#{vis.to_s.capitalize} #{type_result}"
    %>      
            <ul class='list-group'>
              <li class='list-group-item active'><%=h type_result %></li>
              <ul class='list-group'>
              <% list.each do |method|
                   if method.respond_to?(:aref)
                     if method.name.to_s.empty? && method.call_seq %>
                       <%= link_to(method.call_seq.gsub(/<br\s*\/?>/, '').split(/[\r\n]+/).map{ |s| s.split(/([({]+|\[\{|\s+(#?=>|&rarr;)\s+)/).first.sub(/^[A-Za-z0-9_:]+\./, '').sub(/\s+=\s+.*/, '=').strip }.uniq.join('<br />\n'), '#' + method.aref, class: "list-group-item") %>
                  <% else %>
                       <%= link_to(method.name, '#' + method.aref, class: "list-group-item") %>
                  <% end 
                   elsif method.respond_to?(:html_name) %>
                     <%= link_to(method.name, "#method-#{method.html_name}", class: "list-group-item") %>
                <% else %>
                     <li class='list-group-item'><%=h method.name %></li>
                <% end
                 end %>
              </ul>
            </ul> 
      <% end 
       end %>
    </div>
  </div>
<%
end

if entry.requires or sections or entry.includes %>
  <div id='context'>
<% unless entry.requires.empty? %>
     <div id='requires'>
     <h2>Required files</h2>
     <ol>
     <% entry.requires.each do |req| %>
          <li><%=h req.name %></li>
     <% end %></ol>
     </div>
<% end
   if sections && (sections.length > 1 || sections.first.title.to_s != '') %>
     <div id='contents'>
       <h2>Contents</h2>
       <ol>
         <% sections.sort_by{|s| s.title.to_s}.each do |section| %>
           <li><%= link_to(section.title, "##{section.aref}") %></li>
         <% end %>
       </ol>
     </div>
<% end
   unless entry.includes.empty? %>
     <div id='includes'>
       <h2>Included modules</h2>
       <ol>
         <% entry.includes.each do |inc| %>
           <li><%= (mod = inc.module).is_a?(String) ? h(inc.name) : link_to(inc.name, entry.aref_to(mod.path)) %></li>
         <% end %>
       </ol>
     </div>
<% end %>
  </div>
<% end %>
